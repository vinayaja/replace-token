{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "paramAPPServiceName": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
        "paramAPIName": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
        "paramStorageAccountName": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
		"paramLocation": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
		"paramSubScriptionID": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
		"paramResourceGroup": {
            "defaultValue": "see parameters.json",
            "type": "String"
        },
		"paramFunctionAppKey": {
            "defaultValue": "see parameters.json",
            "type": "String"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2021-08-01",
            "name": "[parameters('paramAPIName')]",
            "location": "[parameters('paramLocation')]",
            "sku": {
                "name": "Consumption",
                "capacity": 0
            },
            "properties": {
                "publisherEmail": "vinayak.jadhav333@live.com",
                "publisherName": "vinayak jadhav",
                "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
                "hostnameConfigurations": [
                    {
                        "type": "Proxy",
                        "hostName": "[concat(parameters('paramAPIName'),'.azure-api.net')]",
                        "negotiateClientCertificate": false,
                        "defaultSslBinding": true,
                        "certificateSource": "BuiltIn"
                    }
                ],
                "customProperties": {
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
                    "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
                },
                "virtualNetworkType": "None",
                "disableGateway": false,
                "apiVersionConstraint": {},
                "publicNetworkAccess": "Enabled"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/', parameters('paramAPPServiceName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "displayName": "[parameters('paramAPPServiceName')]",
                "apiRevision": "1",
                "description": "[concat('Import from', parameters('paramAPPServiceName'),' Function App')]",
                "subscriptionRequired": true,
                "path": "[parameters('paramAPPServiceName')]",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/', parameters('paramAPPServiceName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "description": "[parameters('paramAPPServiceName')]",
                "url": "[concat('https://', parameters('paramAPPServiceName'), '.azurewebsites.net/api')]",
                "protocol": "http",
                "resourceId": "[concat('https://management.azure.com/subscriptions/', parameters('paramSubScriptionID'), '/resourceGroups/', parameters('paramResourceGroup'), '/providers/Microsoft.Web/sites/', parameters('paramAPPServiceName'))]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "[concat('{{', parameters('paramAPPServiceName'), '-key}}')]"
                        ]
                    }
                }
            }
        },
		{
            "type": "Microsoft.ApiManagement/service/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound></inbound>\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound></outbound>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('paramAPIName'), '/', parameters('paramAPPServiceName'),'-key')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "displayName": "[concat(parameters('paramAPPServiceName'),'-key')]",
                "value": "[parameters('paramFunctionAppKey')]",
                "tags": [
                    "key",
                    "function",
                    "auto"
                ],
                "secret": true
            }
        },
		
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/', parameters('paramAPPServiceName'),'/get-getrandomnumber')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('paramAPIName'), parameters('paramAPPServiceName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "displayName": "GetRandomNumber",
                "method": "GET",
                "urlTemplate": "/GetRandomNumber",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/subscriptions",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/OauthKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('paramAPIName'), parameters('paramAPPServiceName'))]"
            ],
            "properties": {
                "scope": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('paramAPIName'), parameters('paramAPPServiceName'))]",
                "displayName": "Oauth",
                "state": "active",
                "allowTracing": false
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('paramAPIName'), '/', parameters('paramAPPServiceName'), '/get-getrandomnumber/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('paramAPIName'), parameters('paramAPPServiceName'), 'get-getrandomnumber')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('paramAPIName'), parameters('paramAPPServiceName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('paramAPIName'))]"
            ],
            "properties": {
                "value": "[concat('<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"', parameters('paramAPPServiceName'),'\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>')]",
                "format": "xml"
            }
        }
    ]
}